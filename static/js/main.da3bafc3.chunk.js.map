{"version":3,"sources":["Components/UserComp.js","Components/UsersComp.js","Components/TodoComp.js","Components/NewTodoComp.js","Context/UsersDataContext.js","Components/TodosComp.js","Components/PostComp.js","Components/NewPostComp.js","Components/PostsComp.js","Components/UserPostsAndTodos.js","Utils/utils.js","Components/AddNewUserComp.js","App.js","serviceWorker.js","index.js"],"names":["UserComp","props","readUserName","e","setState","name","target","value","readUserEmail","email","readUserStreet","street","readUserCity","city","readUserZipcode","zipCode","areAllTasksCompleted","userTodos","every","todo","completed","showOtherData","hideOtherData","updateUser","tmpUser","id","state","address","zipcode","updateUserCbf","deleteUser","deleteUserCbf","showUserDetails","setSelectedUserIdCbf","userData","isSelected","userContainerStyle","this","showOtherDataStyle","idLabelStyle","className","onClick","type","onChange","onMouseOver","Component","UsersComp","readSearchInput","searchText","dispalyAddNewUser","displayAddNewUserCbf","filterUserTodos","todosArr","filter","t","userId","updatedUser","setSelectedUser","selectedUserId","setSelectedUserCbf","tmpUsersArr","usersArr","user","str","toUpperCase","includes","usersCompArr","map","u","key","TodoComp","markCompleted","markTodoAsCompletedCbf","markCompletedBtn","isCompleted","style","color","backgroundColor","title","toString","NewTodoComp","readTitleName","addNewTodo","newTodo","addNewTodoCbf","cancelNewTodo","cancelNewTodoCbf","UsersDataContext","React","createContext","UsersDataProvider","Provider","UsersDataConsumer","Consumer","TodosComp","displayNewTodo","isAddMode","addTodoCbf","markTodoAsCompleted","todosItems","addButtonStyle","length","PostComp","body","NewPostComp","readTitle","readBody","addNewPost","newPost","addNewPostCbf","cancelPost","cancelPostCbf","PostsComp","displayNewPost","post","addPostCbf","postsItems","userPosts","UserPostsAndTodos","addTodo","addPost","url","axios","get","AddNewUserComp","readName","readEmail","addNewUser","newUser","addNewUserCbf","cancelNewUser","cancelNewUserCbf","Address","User","oUser","newId","App","updateUserInDB","tmpArr","usersDB","userIndex","findIndex","console","log","deleteUserFromDB","addNewUserMode","filterUserPost","postsDB","p","todosDB","newPostsCounter","postsCounter","newTodoCounter","todosCounter","tmpTodosDb","todoIndex","tmpTodo","displayAddNewUser","newUserId","usersCounter","utils","usersResp","data","postsResp","todosResp","lastUserId","lastPostId","lastTodoId","userPostsArr","userTodosArr","userPostsAndTodosComp","addNewUserComp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da3bafc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserComp.css';\n\nclass UserComp extends Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      id : this.props.userData.id,\n      name : this.props.userData.name,\n      email : this.props.userData.email,\n      street : this.props.userData.address.street,\n      city : this.props.userData.address.city,\n      zipCode : this.props.userData.address.zipcode,\n      showOtherData : false,\n      isSelected : this.props.isSelected,\n    }\n  }\n\n  readUserName = (e) => {\n    this.setState({name : e.target.value});\n  }\n\n  readUserEmail = (e) => {\n    this.setState({email : e.target.value});\n  }\n\n  readUserStreet = (e) => {\n    this.setState({street : e.target.value});\n  }\n\n  readUserCity = (e) => {\n    this.setState({city : e.target.value});\n  }\n\n  readUserZipcode = (e) => {\n    this.setState({zipCode : e.target.value});\n  }\n\n  areAllTasksCompleted = () => {\n    return this.props.userTodos.every(todo => todo.completed)\n  }\n\n  showOtherData = () => {\n    this.setState({showOtherData : true});\n  }\n\n  hideOtherData = () => {\n    this.setState({showOtherData : false});\n  }\n\n  updateUser = () => {\n    let tmpUser =  {\n      id : this.state.id,\n      name : this.state.name,\n      email : this.state.email,\n      address : {\n        street : this.state.street,\n        city : this.state.city,\n        zipcode : this.state.zipCode\n      }\n    };\n\n    this.props.updateUserCbf(tmpUser);\n  }\n  \n  deleteUser = () => {\n    this.props.deleteUserCbf(this.state.id);\n  }\n\n  showUserDetails = () => {\n    // tell the \"users\" that we selected this user\n    this.props.setSelectedUserIdCbf(this.state.id);\n  }\n\n\n  render() {\n    \n    // Set the border color for the user component \n    let userContainerStyle = this.areAllTasksCompleted() ? \"greenBorder\" : \"redBorder\";\n    let userContaineBackgroundColor = this.props.isSelected ? \"orangeBackground\" : \"whiteBackground\"\n    userContainerStyle = \"user-container \" + userContainerStyle + \" \" + userContaineBackgroundColor;\n\n    let showOtherDataStyle = this.state.showOtherData ? \"showElement\" : \"hideElement\";\n    showOtherDataStyle = \"address-container \" + showOtherDataStyle;\n    \n    let idLabelStyle = this.areAllTasksCompleted() ? \"greenLookLikeLink\" : \"redLookLikeLink\"\n\n    return (\n      <div className={userContainerStyle}>\n        <div>\n          <label className={idLabelStyle} onClick={this.showUserDetails}>ID:</label>{this.state.id}\n        </div>\n        Name: <input type=\"text\" value={this.state.name} onChange={this.readUserName}/> <br/>\n        Email: <input type=\"text\" value={this.state.email} onChange={this.readUserEmail}/> <br/> <br/>\n        <div className=\"otherDataStyle\" onClick={this.hideOtherData} onMouseOver={this.showOtherData}>\n          Other Data\n        </div>\n        \n        <div className={showOtherDataStyle}>\n          Street: <input type=\"text\" value={this.state.street} onChange={this.readUserStreet}/> <br/>\n          City: <input type=\"text\" value={this.state.city} onChange={this.readUserCity}/> <br/>\n          Zip Code: <input type=\"text\" value={this.state.zipCode} onChange={this.readUserZipcode}/> <br/>\n        </div>\n        <br/>\n        <div className=\"update-delete-container\">\n          <input className=\"update-delete-item\" type=\"button\" value=\"Delete\" onClick={this.deleteUser}/>\n          <input className=\"update-delete-item\" type=\"button\" value=\"Update\" onClick={this.updateUser}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserComp;\n","import React, { Component } from 'react';\nimport './UsersComp.css';\nimport UserComp from './UserComp'\n\nclass UsersComp extends Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      searchText : \"\",\n      selectedUserId : 0\n    }\n  }\n\n  readSearchInput = (e) => {\n     this.setState ({searchText : e.target.value});\n  }\n\n  dispalyAddNewUser = () => {\n    this.props.displayAddNewUserCbf();\n  }\n\n\n  filterUserTodos = (id) => {\n    return this.props.todosArr.filter(t => t.userId === id);\n  }\n\n  deleteUser = (userId) => {\n    this.props.deleteUserCbf(userId);\n  }\n\n  updateUser = (updatedUser) => {\n    this.props.updateUserCbf(updatedUser);\n  }\n\n  setSelectedUser = (id) => {\n\n    this.setState({selectedUserId : id})\n\n    this.props.setSelectedUserCbf(id);\n  }\n\n  render() {\n\n    // Build UserComp elements \n    let tmpUsersArr = this.props.usersArr;\n\n    if(this.state.searchText !== '')\n    {\n      tmpUsersArr = this.props.usersArr.filter(user => {\n        let str = this.state.searchText.toUpperCase();\n        return  user.name.toUpperCase().includes(str) || user.email.toUpperCase().includes(str);\n      })\n    }\n\n    let usersCompArr = tmpUsersArr.map((u) => {\n      return <UserComp  \n                key={u.id}\n                isSelected = {u.id === this.state.selectedUserId}\n                userData={u} \n                userTodos={this.filterUserTodos(u.id)}\n                deleteUserCbf = {userId => this.deleteUser(userId)}\n                updateUserCbf = {updatedUser => this.updateUser(updatedUser)}\n                setSelectedUserIdCbf = {id => this.setSelectedUser(id)}\n                />\n    });\n\n    return (\n      <div id=\"users-contianer\">\n        <div>\n          <label>Search: </label>\n          <input className=\"resizedTextbox\" type=\"text\" onChange={this.readSearchInput}/>\n          <input type=\"button\" value=\"Add\" onClick={this.dispalyAddNewUser}/>\n        </div>\n        {usersCompArr}\n      </div>\n    );\n  }\n}\n\nexport default UsersComp;\n","import React, { Component } from 'react';\nimport './Todo.css'\n\nclass TodoComp extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      \n    }\n  }\n\n  markCompleted = () => {\n    this.props.markTodoAsCompletedCbf(this.props.id);\n  }\n\n  render() {\n\n    let markCompletedBtn = null;\n    if (!this.props.isCompleted){\n      var divStyle = {\n        color: 'black',\n        backgroundColor: 'orange'\n      };\n      markCompletedBtn = <input type=\"button\" value=\"Mark Completed\" style={divStyle} onClick={this.markCompleted}/>\n    }\n\n    return (\n      <div id=\"todo-container\">\n        <label> <span>Title:</span> {this.props.title}</label> <br/>\n        <label> <span>Completed:</span> {this.props.isCompleted.toString()}</label> <br/>\n        {markCompletedBtn}\n      </div>\n    );\n  }\n}\n\nexport default TodoComp;","import React, { Component } from 'react';\r\nimport './NewTodo.css'\r\n\r\nclass NewTodoComp extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      title : \"\"\r\n    }\r\n  }\r\n\r\n  readTitleName = (e) => {\r\n    this.setState ({title : e.target.value});\r\n  }\r\n\r\n  addNewTodo = () => {\r\n    let newTodo = {\r\n      title : this.state.title,\r\n      completed : false\r\n    }\r\n\r\n    this.props.addNewTodoCbf(newTodo)\r\n  }\r\n\r\n  cancelNewTodo = () => {\r\n    this.props.cancelNewTodoCbf();\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div >\r\n        <div className=\"center\">\r\n          <label> <span>Title:</span> <input type=\"text\" onChange={this.readTitleName}/> </label>\r\n        </div>\r\n      \r\n      \r\n        <div className=\"newTodo-add-cancel-container\">\r\n          <input className=\"newTodo-add-cancel-item\" type=\"button\" value=\"Add\" onClick={this.addNewTodo}/>\r\n          <input className=\"newTodo-add-cancel-item\" type=\"button\" value=\"Cancel\" onClick={this.cancelNewTodo}/>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoComp;","import React from 'react'\r\n\r\nconst UsersDataContext = React.createContext();\r\nexport const UsersDataProvider = UsersDataContext.Provider;\r\nexport const UsersDataConsumer = UsersDataContext.Consumer;\r\n\r\nexport default UsersDataContext;","import React, { Component } from 'react';\nimport './Todos.css'\nimport TodoComp from './TodoComp';\nimport NewTodoComp from './NewTodoComp';\nimport { UsersDataConsumer } from '../Context/UsersDataContext';\n\nclass TodosComp extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      isAddMode : false,\n    }\n  }\n\n  displayNewTodo = () => {\n      this.setState ({isAddMode : true})\n  }\n\n  addNewTodo = (todo) => {\n    this.setState ({isAddMode : false})\n    this.props.addTodoCbf(todo);\n  }\n\n  cancelNewTodo = () => {\n    this.setState ({isAddMode : false})\n  }\n\n  markTodoAsCompleted = (id) => {\n    this.props.markTodoAsCompletedCbf(id);\n  }\n\n\n  render() {\n\n    return (\n      <UsersDataConsumer>\n        {\n          props => \n          {\n            // create the title text\n            let title = this.state.isAddMode ? \"New Todo - User \" : \"Todos - User \";\n            title = title + props.userId;\n\n            // create the list of todos or the \"add new todo\" component\n            let todosItems = null;\n            if(this.state.isAddMode){\n              todosItems =  <NewTodoComp\n                              addNewTodoCbf = {todo => this.addNewTodo(todo)}\n                              cancelNewTodoCbf = {this.cancelNewTodo}\n                            />\n            }\n            else{\n              todosItems = props.userTodos.map(t => {\n                return  <TodoComp \n                          key={t.id}\n                          id={t.id}\n                          title = {t.title}\n                          isCompleted = {t.completed}\n                          markTodoAsCompletedCbf = {id => this.markTodoAsCompleted(id)}\n                        />\n              })\n            }\n\n            let addButtonStyle = \"addBtn showElement\";\n            if (this.state.isAddMode){\n              addButtonStyle = \"addBtn hideElement\"\n            }\n\n            if(todosItems.length === 0){\n              todosItems = 'No todos yet! Add some...'\n            }\n            \n            return (\n              <div id=\"todos-container\">\n                <label className=\"todos-item\">{title}</label>\n                <input className={addButtonStyle} type=\"button\" value=\"Add\" onClick={this.displayNewTodo}/>\n                <div className=\"todos-items todos-item\">\n                  {todosItems}\n                </div>\n              </div>\n            )\n          }\n        }\n      </UsersDataConsumer>\n    )\n  }\n}\n\nexport default TodosComp;","import React, { Component } from 'react';\nimport './Post.css'\n\nclass PostComp extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      \n    }\n  }\n\n  render() {\n    \n    return (\n      <div id=\"post-container\">\n        <label> <span>Title:</span> {this.props.title}</label> \n        <br/> <br/>\n        <label> <span>Body:</span> {this.props.body}</label>\n      </div>\n    );\n  }\n}\n\nexport default PostComp;","import React, { Component } from 'react';\r\nimport './NewPost.css'\r\n\r\nclass NewPostComp extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      title : \"\",\r\n      body : \"\"\r\n    }\r\n  }\r\n\r\n  readTitle = (e) => {\r\n    this.setState ({title : e.target.value});\r\n  }\r\n\r\n  readBody = (e) => {\r\n    this.setState ({body : e.target.value});\r\n  }\r\n\r\n  addNewPost = () => {\r\n    let newPost = {\r\n      title : this.state.title,\r\n      body : this.state.body\r\n    };\r\n\r\n    this.props.addNewPostCbf(newPost);\r\n  }\r\n\r\n  cancelPost = () => {\r\n    this.props.cancelPostCbf();\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div >\r\n        <div className=\"center\">\r\n          <label> <span>Title:</span> <input type=\"text\" onChange={this.readTitle}/> </label> <br/> <br/>\r\n          <label> <span>Body:</span> <textarea type=\"text\" onChange={this.readBody}/> </label>\r\n        </div>\r\n      \r\n      \r\n        <div className=\"newPost-add-cancel-container\">\r\n          <input className=\"newPost-add-cancel-item\" type=\"button\" value=\"Add\" onClick={this.addNewPost}/>\r\n          <input className=\"newPost-add-cancel-item\" type=\"button\" value=\"Cancel\" onClick={this.cancelPost}/>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPostComp;","import React, { Component } from 'react';\nimport './Posts.css'\nimport PostComp from './PostComp'\nimport NewPostComp from './NewPostComp';\nimport { UsersDataConsumer } from '../Context/UsersDataContext';\n\nclass PostsComp extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      isAddMode : false\n    }\n  }\n\n  displayNewPost = () => {\n    this.setState({isAddMode : true});\n  }\n\n  addNewPost = (post) => {\n    this.setState({isAddMode : false});\n    this.props.addPostCbf(post);\n  }\n\n  cancelPost = () => {\n    this.setState ({isAddMode : false});\n  }\n\n  render() {\n    \n    return (\n      <UsersDataConsumer>\n        {\n          props => {\n\n            // create the title text\n            let title = this.state.isAddMode ? \"New Post - User \" : \"Posts - User \";\n            title = title + props.userId;\n\n            // create the class for the inner container \n\n            // create the list of todos or the \"add new todo\" component\n            let postsItems = null;\n            if(this.state.isAddMode){\n              postsItems =  <NewPostComp \n                              addNewPostCbf = {post => this.addNewPost(post)}\n                              cancelPostCbf = {this.cancelPost}\n                            />\n            }\n            else{\n              postsItems = props.userPosts.map(t => {\n                return  <PostComp \n                          key={t.id}\n                          id={t.id}\n                          title = {t.title}\n                          body = {t.body}\n                        />\n              })\n            }\n\n            let addButtonStyle = \"addBtn showElement\";\n            if (this.state.isAddMode){\n              addButtonStyle = \"addBtn hideElement\"\n            }\n\n            let s;\n            if(postsItems.length === 0){\n              postsItems = 'No posts yet! Add some...'\n            }\n\n            //html here\n            return (\n              <div id=\"posts-container\">\n                <label className=\"posts-item\">{title}</label>\n                <input className={addButtonStyle} type=\"button\" value=\"Add\" onClick={this.displayNewPost}/>\n                <div className=\"posts-items\">\n                  {postsItems}\n                </div>\n              </div>\n            )\n          }\n        }\n      </UsersDataConsumer>\n    )\n  }\n}\n\nexport default PostsComp;","import React, { Component } from 'react';\nimport './UserPostsAndTodos.css';\nimport TodosComp from './TodosComp';\nimport PostsComp from './PostsComp';\n\nclass UserPostsAndTodos extends Component {\n\n  constructor(props)\n  {\n    super(props);\n  }\n\n  addTodo = (todo) => {\n    this.props.addTodoCbf(todo);\n  }\n\n  addPost = (post) => {\n    this.props.addPostCbf(post);\n  }\n\n  markTodoAsCompleted = (id) => {\n    this.props.markTodoAsCompletedCbf(id);\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <TodosComp \n          addTodoCbf ={todo => this.addTodo(todo)}\n          markTodoAsCompletedCbf = {id => this.markTodoAsCompleted(id)}\n        />\n          \n        <PostsComp \n          addPostCbf={post => this.addPost(post)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserPostsAndTodos;\n","import axios from 'axios'\r\n\r\n\r\nconst getAll = (url) => {\r\n    return axios.get(url);\r\n}\r\n\r\nexport default { getAll }","import React, { Component } from 'react'\r\nimport './AddNewUser.css'\r\n\r\nclass  AddNewUserComp extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name : \"\",\r\n            email : \"\"\r\n        }\r\n    }\r\n\r\n    readName = (e) => {\r\n        this.setState({\r\n            name : e.target.value\r\n        });\r\n    }\r\n\r\n    readEmail = (e) => {\r\n        this.setState({\r\n            email : e.target.value\r\n        });\r\n    }\r\n\r\n    addNewUser = () => {\r\n\r\n        let newUser = {\r\n            name : this.state.name,\r\n            email : this.state.email\r\n        }\r\n\r\n        this.props.addNewUserCbf(newUser);\r\n    }\r\n\r\n    cancelNewUser = () => {\r\n        this.props.cancelNewUserCbf();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            Add New User\r\n            <div className=\"addNewUser-container center\">\r\n                <div>\r\n                    <label> <span>Name:</span> <input type=\"text\" onChange={this.readName}/> </label> <br/>\r\n                    <label> <span>Email:</span> <input type=\"text\" onChange={this.readEmail}/> </label> <br/>\r\n                </div>\r\n                <div className=\"newUser-add-cancel-container\">\r\n                        <input className=\"newUser-add-cancel-item\" type=\"button\" value=\"Add\" onClick={this.addNewUser}/>\r\n                        <input className=\"newUser-add-cancel-item\" type=\"button\" value=\"Cancel\" onClick={this.cancelNewUser}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewUserComp","import React, { Component } from 'react';\nimport './App.css';\nimport UsersComp from './Components/UsersComp'\nimport UserPostsAndTodos from './Components/UserPostsAndTodos';\nimport utils from './Utils/utils'\nimport AddNewUserComp from './Components/AddNewUserComp'\nimport {UsersDataProvider} from './Context/UsersDataContext'\n\n\nclass Address {\n  constructor(){\n    this.street = \"\";\n    this.city = \"\";\n    this.zipcode = \"\";\n  }\n}\n\nclass User{\n  constructor(oUser, newId){\n    this.id = newId;\n    this.name = oUser.name;\n    this.email = oUser.email;\n    this.address = new Address();\n  }\n}\n\n\n\nclass App extends Component {\n\n  constructor()\n  {\n    super();\n    this.state = {\n      usersDB : [], \n      postsDB : [],\n      todosDB : [],\n      selectedUserId : -1,\n      usersCounter : -1,\n      postsCounter : -1,\n      todosCounter : -1,\n      addNewUserMode : false\n    }\n  }\n\n\n  async componentDidMount()\n  {\n    let usersResp = await utils.getAll(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({usersDB : usersResp.data})\n\n    let postsResp = await utils.getAll(\"https://jsonplaceholder.typicode.com/posts\");\n    this.setState({postsDB : postsResp.data})\n\n    let todosResp = await utils.getAll(\"https://jsonplaceholder.typicode.com/todos\");\n    this.setState({todosDB : todosResp.data})\n\n    let lastUserId = usersResp.data[usersResp.data.length -1].id;\n    let lastPostId = postsResp.data[postsResp.data.length - 1].id;\n    let lastTodoId = todosResp.data[todosResp.data.length - 1].id;\n    this.setState (\n        {\n          usersCounter : lastUserId,\n          postsCounter : lastPostId,\n          todosCounter : lastTodoId,\n        }\n      )\n  }\n\n  updateUserInDB = (updatedUser) => {\n    let tmpArr = [...this.state.usersDB];\n    let userIndex = tmpArr.findIndex(user => user.id === updatedUser.id);\n\n    if(userIndex > -1){\n      tmpArr[userIndex] = updatedUser;\n    }\n    else{\n      console.log('cant find user in the DB');\n    }\n    \n    this.setState({usersDB : tmpArr});\n  }\n\n  deleteUserFromDB = (userId) => {\n    let tmpArr = this.state.usersDB.filter( user => {\n      return user.id !== userId;\n    })\n    this.setState({usersDB : tmpArr});\n  }\n\n  setSelectedUser = (id) => {\n    this.setState({\n      selectedUserId : id,    //this will render the \n      addNewUserMode : false\n    });\n  }\n\n  filterUserPost = (id) => {\n    return this.state.postsDB.filter(p => p.userId === id);\n  }\n\n  filterUserTodos = (id) => {\n    return this.state.todosDB.filter(t => t.userId === id);\n  }\n\n  addPost = (post) => {\n    let newPostsCounter = this.state.postsCounter + 1;\n    post.id = newPostsCounter;\n    post.userId = this.state.selectedUserId;\n\n    this.setState ({\n      postsCounter : newPostsCounter,\n      postsDB : [...this.state.postsDB, post]\n    })\n  }\n\n  addTodo = (todo) => {\n    let newTodoCounter = this.state.todosCounter + 1;\n    todo.id = newTodoCounter;\n    todo.userId = this.state.selectedUserId;\n\n    this.setState ({\n      todosCounter : newTodoCounter,\n      todosDB : [...this.state.todosDB, todo]\n    })\n  }\n\n  markTodoAsCompleted = (id) => {\n    let tmpTodosDb = [...this.state.todosDB];\n    let todoIndex = tmpTodosDb.findIndex( todo => todo.id === id );\n    let tmpTodo = {\n      ...tmpTodosDb[todoIndex],\n      completed : true\n    };\n    tmpTodosDb[todoIndex] = tmpTodo;\n    this.setState ({\n      todosDB : tmpTodosDb\n    })\n  }\n\n  displayAddNewUser = (user) => {\n    this.setState ({\n      addNewUserMode : true,\n      selectedUserId : -1,\n    });\n  }\n\n  addNewUser = (user) => {\n\n    // Increment the user OID\n    let newUserId = this.state.usersCounter + 1 ;\n\n    // Update flags\n    this.setState ({\n      addNewUserMode : false,\n      selectedUserId : -1,\n      usersCounter : newUserId\n    });\n\n    // Add the user tob the users DB\n    this.setState({\n      usersDB : [...this.state.usersDB, new User(user, newUserId)]\n    });\n  } \n\n  cancelNewUser = () => {\n    this.setState ({\n      addNewUserMode : false,\n      selectedUserId : -1\n    });\n  }\n\n  render() {\n\n    // Render UserPostsAndTodos component (if user was selected)\n    let userPostsArr = null;\n    let userTodosArr = null;\n    let userPostsAndTodosComp = null;\n    if (this.state.selectedUserId !== -1){\n      //filter the user posts and todos (if user was selected)\n      userPostsArr = this.filterUserPost(this.state.selectedUserId);\n      userTodosArr = this.filterUserTodos(this.state.selectedUserId);\n\n      userPostsAndTodosComp = <UsersDataProvider  \n                                value={{\n                                  userId : this.state.selectedUserId,\n                                  userPosts : userPostsArr,\n                                  userTodos: userTodosArr\n                                }}>\n                                  <UserPostsAndTodos className=\"main-item main-item-userPostsAndTodos\"\n                                    userId={this.state.selectedUserId}\n                                    userPosts={userPostsArr}\n                                    userTodos={userTodosArr}\n                                    addPostCbf = {post => this.addPost(post)}\n                                    addTodoCbf = {todo => this.addTodo(todo)}\n                                    markTodoAsCompletedCbf = {id => this.markTodoAsCompleted(id)}\n                                  />\n                              </UsersDataProvider>\n\n    }\n\n    // Create AddNewUserComp if user pressed the \"Add\" button\n    let addNewUserComp = null;\n    if(this.state.addNewUserMode){\n      addNewUserComp =  <AddNewUserComp \n                          addNewUserCbf = {user => this.addNewUser(user)}\n                          cancelNewUserCbf = {this.cancelNewUser}\n                        />\n    }\n\n    return (\n      <div className=\"main-container\">\n\n        <UsersComp className=\"main-item main-item-users\" \n          usersArr= {this.state.usersDB} \n          todosArr= {this.state.todosDB}\n          updateUserCbf = {updatedUser => this.updateUserInDB(updatedUser)}\n          deleteUserCbf = {userId => this.deleteUserFromDB(userId)}\n          setSelectedUserCbf = {id => this.setSelectedUser(id)}\n          displayAddNewUserCbf = {this.displayAddNewUser}\n        />\n\n        <div>\n          {userPostsAndTodosComp}\n        </div>\n\n        <div>\n          {addNewUserComp}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}